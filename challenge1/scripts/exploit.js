// DO NOT EDIT THIS FILE
const hre = require("hardhat");

async function main() {

  const binanceAddress = "0x47ac0Fb4F2D84898e4D9E7b4DaB3C24507a6D503";

  await hre.network.provider.request({
    method: "hardhat_impersonateAccount",
    params: [binanceAddress],
  });
  const binance = await ethers.getSigner(binanceAddress);
  const usdc = await hre.ethers.getContractAt("ERC20", "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48");
  const dai = await hre.ethers.getContractAt("ERC20", "0x6B175474E89094C44Da98b954EedeAC495271d0F");


  const Exploit = await hre.ethers.getContractFactory("Exploit");
  const exploit = await Exploit.deploy();
  await exploit.deployed();
  console.log("Exploit contract deployed to:", exploit.address);

  const Depeg = await hre.ethers.getContractFactory("Depeg");
  const depeg = await Depeg.deploy();
  await depeg.deployed();
  console.log("Depeg contract deployed to: ", depeg.address);

  console.log("Simulating a USDC depeg event...");
  const binanceUsdcBalance = await usdc.balanceOf(binance.address);
  await usdc.connect(binance).transfer(depeg.address, binanceUsdcBalance);
  await depeg.messWithPeg();
  console.log("Finish depegging USDC...");
  console.log("Now it's your time to code, make this script run successfully by just changing the Exploit.sol file.");

  await exploit.start();

  // Add condition on signer balance has to be greater than xxx
  finalDaiBalance = await dai.balanceOf(exploit.address);

  if(finalDaiBalance.gt(ethers.utils.parseEther("44999999"))){
    console.log("Congrats, you've successfully passed this game");
  } else {
    console.log("Sorry, not enough DAI gained, you only have %s DAI in the contract", finalDaiBalance);
  }

}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
